@model CloudBasedRMS.View.Controllers.ViewModel.UserViewModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<style type="text/css">
    /* Base CSS */
    .alignleft {
        float: left;
        margin-right: 15px;
    }
    .alignright {
        float: right;
        margin-left: 15px;
    }
    .aligncenter {
        display: block;
        margin: 0 auto 15px;
    }
    a:focus {
        outline: 0 solid;
    }
    img {
        max-width: 100%;
        height: auto;
    }
    .fix {
        overflow: hidden;
    }
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        margin: 0 0 15px;
        font-weight: 700;
    }
    html,
    a {
        -moz-transition: 0.3s;
        -o-transition: 0.3s;
        -webkit-transition: 0.3s;
        transition: 0.3s;
        color: #333;
    }
        a:hover {
            text-decoration: none;
        }
    .search-box {
        margin: 80px auto;
        position: absolute;
    }
    .caption {
        margin-bottom: 50px;
    }
    .loginForm input[type=text], .loginForm input[type=password] {
        margin-bottom: 10px;
    }
    .loginForm input[type=submit] {
        background: #fb044a;
        color: #fff;
        font-weight: 700;
    }
    #pswd_info {
        background: #dfdfdf none repeat scroll 0 0;
        color: #fff;
        left: 20px;
        position: absolute;
        top: 115px;
    }
     #pswd_info h4 {
            background: black none repeat scroll 0 0;
            display: block;
            font-size: 14px;
            letter-spacing: 0;
            padding: 17px 0;
            text-align: center;
            text-transform: uppercase;
        }
        #pswd_info ul {
            list-style: outside none none;
        }
            #pswd_info ul li {
                padding: 10px 45px;
            }
    .valid {
        background: rgba(0, 0, 0, 0) url("https://s19.postimg.org/vq43s2wib/valid.png") no-repeat scroll 2px 6px;
        color: green;
        line-height: 21px;
        padding-left: 22px;
    }
    .invalid {
        background: rgba(0, 0, 0, 0) url("https://s19.postimg.org/olmaj1p8z/invalid.png") no-repeat scroll 2px 6px;
        color: red;
        line-height: 21px;
        padding-left: 22px;
    }
    #pswd_info::before {
        background: #dfdfdf none repeat scroll 0 0;
        content: "";
        height: 25px;
        right: -13px;
        margin-top: -12.5px;
        position: absolute;
        top: 50%;
        transform: rotate(45deg);
        width: 25px;
    }
    #pswd_info {
        display: none;
    }
</style>
<div class="breadcrumbs ace-save-state" id="breadcrumbs">
    <ul class="breadcrumb">
        <li>
            <i class="ace-icon fa fa-home home-icon"></i>
            <a href="#">@Resource.Home</a>
        </li>
        <li>
            <a href="#">@Resource.AdminSetUp</a>
        </li>
        <li class="active">Create User Account</li>
    </ul><!-- /.breadcrumb -->
</div>
@*Show Error Message or Info Message*@
@if (!string.IsNullOrEmpty(ViewBag.Status))
{
    <div class="alert alert-danger">
        @ViewBag.Status
    </div>
}<p>
   <h3>Create User Account!</h3>  
    </p>
@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()   
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.RoleName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("RoleName", new SelectList(Model.Roles, "Name", "Name"),"--Select Role--", new { @class = "col-xs-10 col-sm-5" } )
                @Html.ValidationMessageFor(model => model.RoleName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="aro-pswd_info">
                <div id="pswd_info">
                    <h4>Password must be requirements</h4>
                    <ul>
                        <li id="letter" class="invalid">At least <strong>one letter</strong></li>
                        <li id="capital" class="invalid">At least <strong>one capital letter</strong></li>
                        <li id="number" class="invalid">At least <strong>one number</strong></li>
                        <li id="length" class="invalid">Be at least <strong>8 characters</strong></li>
                        <li id="space" class="invalid">be<strong> use [~,!,#,@@,$,%,^,&,*,-,=,.,;,']</strong></li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NRCNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NRCNo, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.NRCNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Fax, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Fax, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.Fax, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PasswordQuestion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PasswordQuestion, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.PasswordQuestion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PasswordAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PasswordAnswer, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.PasswordAnswer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value=@Resource.Create class="btn btn-default" />
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink(Resource.BacktoList, "Index")
</div>
@section Scripts {
    @Scripts.Render("~/assets/js/jquery-1.12.4.min.js")
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/assets/js/bootstrap.js"></script>
    <script src="~/Scripts/Angular/Controller.js"></script>
<script type="text/javascript">
        $(document).ready(function () {

        $('input[type=password]').keyup(function () {
            var pswd = $(this).val();

            //validate the length
            if (pswd.length < 8) {
                $('#length').removeClass('valid').addClass('invalid');
            } else {
                $('#length').removeClass('invalid').addClass('valid');
            }

            //validate letter
            if (pswd.match(/[A-z]/)) {
                $('#letter').removeClass('invalid').addClass('valid');
            } else {
                $('#letter').removeClass('valid').addClass('invalid');
            }

            //validate capital letter
            if (pswd.match(/[A-Z]/)) {
                $('#capital').removeClass('invalid').addClass('valid');
            } else {
                $('#capital').removeClass('valid').addClass('invalid');
            }

            //validate number
            if (pswd.match(/\d/)) {
                $('#number').removeClass('invalid').addClass('valid');
            } else {
                $('#number').removeClass('valid').addClass('invalid');
            }

            //validate space
            if (pswd.match(/[^a-zA-Z0-9\-\/]/)) {
                $('#space').removeClass('invalid').addClass('valid');
            } else {
                $('#space').removeClass('valid').addClass('invalid');
            }

        }).focus(function () {
            $('#pswd_info').show();
        }).blur(function () {
            $('#pswd_info').hide();
        });

    });
</script>
}