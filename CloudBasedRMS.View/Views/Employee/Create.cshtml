@model CloudBasedRMS.View.Controllers.ViewModel.EmployeeViewModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<div class="breadcrumbs ace-save-state" id="breadcrumbs">
    <ul class="breadcrumb">
        <li>
            <i class="ace-icon fa fa-home home-icon"></i>
            <a href="#">@Resource.Home</a>
        </li>
        <li>
            <a href="#">@Resource.Member</a>
        </li>
        <li class="active">@Resource.Employee</li>
    </ul><!-- /.breadcrumb -->
</div>
<br />
@using (Html.BeginForm("Create", "Employee", FormMethod.Post, new { enctype = "multipart/form-data" })) 
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal"> 
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeNo, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.EmployeeNo, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label(Resource.EmployeePhoto, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <img id="user_img" height="150" width="150" style="border:solid" />
                <input type="file" title="search image" id="file" name="file" onchange="show(this)"> 
                @Html.ValidationMessageFor(model =>model.ImagePath, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Sex, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                Male:<input type="radio" class="flat" name="Sex" id="genderM" value="Male" required="required"/>
                Female:<input type="radio" class="flat" name="Sex" id="genderF" value="Female" />
                <span id="spnGender"></span>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.JoinDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.JoinDate, new { @class = "col-xs-10 col-sm-5", @id = "txtJoinDate", @placeholder = "dd/mm/yyyy" })
                @Html.ValidationMessageFor(model => model.JoinDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.DOB, new { @class = "col-xs-10 col-sm-5", @id = "txtDOB", @placeholder = "dd/mm/yyyy" })
                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.NRC, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NRC, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.NRC, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.RankID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("RankID", ViewBag.Rank as SelectList, new { @class = "col-xs-10 col-sm-5"})
                @Html.ValidationMessageFor(model => model.RankID, "", new { @class = "text-danger" })             
                <a class="glyphicon-plus btn btn-sm"  title="Create New Rank" data-toggle="modal" data-target="#dialogCreateRank"></a>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.WorkType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WorkType, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.WorkType, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">          
            @Html.LabelFor(model => model.AddressID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("AddressID", ViewBag.Address as SelectList, new { @class = "col-xs-10 col-sm-5" })
                @Html.ValidationMessageFor(model => model.AddressID, "", new { @class = "text-danger" })
                <a class="glyphicon-plus btn btn-sm"  title="Create New Address" data-toggle="modal" data-target="#dialogNewAddress"></a>              
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.BasicPay, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BasicPay, new { htmlAttributes = new { @class = "col-xs-10 col-sm-5" } })
                @Html.ValidationMessageFor(model => model.BasicPay, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button class="btn btn-white btn-info btn-bold" type="submit">
                    <i class="ace-icon fa fa-floppy-o bigger-120 blue"></i>
                    @Resource.Create
                </button>
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink(Resource.BacktoList, "Index")
</div>
@*Create RankDialogBox*@
<div id="dialogCreateRank" class="modal fade" role="dialog" style="margin-left:35%;margin-right:35%;margin-top:5%;overflow:hidden;">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">&times;</button>
            <h4 id="dialogHeader">Create New Rank</h4>
        </div>
        <div class="modal-body">
            <span id="lblMessage" style="color:dodgerblue;font-weight:bold;"></span>
            <div class="form-group">
                @Html.Label("Rank Code")
                @Html.TextBox("RankCode", string.Empty, new { @class = "col-xs-10 col-sm-5", id = "txtRankCode", required = "required" })
                <span id="errorRankCode" style="color:red;font-weight:bold;"></span>
            </div>
            <div class="form-group">
                @Html.Label("Rank Description")
                @Html.TextBox("RankDescription", string.Empty, new { @class = "col-xs-10 col-sm-5", id = "txtRankDescription", required = "required" })
                <span id="errorRankDescription" style="color:red;font-weight:bold;"></span>
            </div>
            <input id="btnCreateRank" type="submit" class="btn btn-success" value="Create" />
            <input id="btnRankCancel"type="submit" class="btn btn-danger" value="Cancel" data-dismiss="modal" />
        </div>
    </div>
</div>

@*Create AddressDialogBox*@
<div id="dialogNewAddress" class="modal fade" role="dialog" style="margin-left:35%;margin-right:35%;margin-top:1%;overflow:hidden;">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">&times;</button>
            <h4 id="dialogHeader">Create New Address</h4>
        </div>
        <div class="modal-body">
            <span id="lblMessage" style="color:dodgerblue;font-weight:bold;"></span>
            <div class="form-group">
                @Html.Label("City")
                @Html.TextBox("City", string.Empty, new { @class = "col-xs-10 col-sm-5", id = "txtCity", required = "required" })
                <span id="errorCity" style="color:red;font-weight:bold;"></span>
            </div>
            <div class="form-group">
                @Html.Label("Township")
                @Html.TextBox("Township", string.Empty, new { @class = "col-xs-10 col-sm-5", id = "txtTownship", required = "required" })
                <span id="errorTownship" style="color:red;font-weight:bold;"></span>
            </div>
            <div class="form-group">
                @Html.Label("Place")
                @Html.TextBox("Place", string.Empty, new { @class = "col-xs-10 col-sm-5", id = "txtPlace", required = "required" })
                <span id="errorPlace" style="color:red;font-weight:bold;"></span>
            </div>
            <div class="form-group">
                @Html.Label("ZipCode")
                @Html.TextBox("ZipCode", string.Empty, new { @class = "col-xs-10 col-sm-5", id = "txtZipCode", required = "required" })
                <span id="errorZipCode" style="color:red;font-weight:bold;"></span>
            </div>
            <div class="form-group">
                @Html.Label("Area")
                @Html.TextArea("Area", string.Empty, new { @class = "col-xs-10 col-sm-5", id = "txtArea", required = "required" })
                <span id="errorArea" style="color:red;font-weight:bold;"></span>
            </div>
            <input id="btnCreateAddress" type="submit" class="btn btn-success" value="Create" />
            <input type="submit" class="btn btn-danger" value="Cancel" data-dismiss="modal" />
        </div>
    </div>
</div>
<script src="~/Scripts/jquery-1.12.4.min.js"></script>
<script src="~/assets/js/jquery-ui-1.12.1.min.js"></script>
@*<script src="~/Scripts/material-charts/js/ripple.js"></script>
<script src="~/Scripts/material-charts/js/demo.js"></script>
<link href="~/Scripts/material-charts/css/ripple.css" rel="stylesheet" />*@
<script type="text/javascript">
       function show(input) {
          if (input.files && input.files[0]) {
          var filerdr = new FileReader();
          filerdr.onload = function (e) {
             $('#user_img').attr('src', e.target.result);
          }//end of funciton(e)
          filerdr.readAsDataURL(input.files[0]);
       }//end of if 
       }//end of show(input) function

       $("#txtJoinDate").datepicker({
           changeMonth: true,
           changeYear: true,
           yearRange: "-100:+0",
           dateFormat: 'mm/dd/yy'
       });
       $("#txtDOB").datepicker({
           changeMonth: true,
           changeYear: true,
           yearRange: "-100:+0",
           dateFormat: 'mm/dd/yy'
       });
       $(document).ready(function () {
           GetAddressData();
       })
       function GetAddressData() {
           var actionUrl = '@Url.Action("GetAddress", "Employee")';
           $.getJSON(actionUrl, function displayData(response) {
               if (response != null) {
                   var $select = $("#ddladdress");
                   $select.find('option').remove();
                   for (var i = 0; i < response.length; i++) {
                       $select.append('<option value="' + response[i].Value + '">'
                     + response[i].Text + '</option>');
                   }
               }
           });
       }
    //saving rank record function
    var RankCode, RankDescription;
    //Create Button Click Event
    $('#btnCreateRank').click(function () {
        //BindEntity
        BindEntity();
            //check validation
            if (ValidationRankRecord()) {
                //Call Ajax Post Function
                CreateRankRecord();
            }
            else {
                //Set Error Message
                $('#errorRankCode').text("Require Rank Code.");
                $('#errorRankDescription').text("Require Rank Description.");
            }
    });
    //validation for create ValidationRankRecord
    function ValidationRankRecord() {
        if (RankCode == '' || RankCode == null || RankCode == undefined) {
            return false;
        }
        else if (RankDescription == '' || RankDescription == null || RankDescription == undefined) {
            return false;
        }
        else {
            return true;
        }
    }
    //end validation ValidationRankRecord
    //BindEntity
    function BindEntity() {
        RankCode = $('#txtRankCode').val();
        RankDescription = $('#txtRankDescription').val();
    }
    //Ajax Post Functin For RankRecord Create
    function CreateRankRecord() {
        $.ajax({
            type: 'POST',
            dataType: 'JSON',
            url: "@Url.Action("CreateRank","Employee",FormMethod.Post)",
            data: { 'Code': RankCode, 'Description': RankDescription},
        success: function (data) {
            if (data) {
                alert("New rank record create successfully!")
                window.location.reload();
            }
            else if (data == false) {
                $('#errorRankCode').text("Rank Code is already existed!");
            }
            else {
                $('#errorRankCode').text("An error occurred while processing your request.");
            }
        }
    });
    }    //end ajax post function
    $('#btnRankCancel').click(function () { ClearControl(); });
    function ClearControl() {
        $('#errorRankCode').text('');
        $('#errorRankDescription').text('');
        $('#txtRankCode').val('');
        $('#txtRankDescription').val('');
    }

    //saving adddress record function
    var city,township,place,zipcode,area
    //Create Button Click Event
    $('#btnCreateAddress').click(function () {
        //BindEntity
        BindAddressEntity();
        //check validation
        if (ValidationAddressRecord()) {
            //Call Ajax Post Function
            CreateAddressRecord();
        }
        else {
            //Set Error Message
            $('#errorCity').text("Require City.");
            $('#errorTownship').text("Require Township.");
            $('#errorPlace').text("Require Place.");
            $('#errorZipCode').text("Require Zip Code.");
            $('#errorArea').text("Require Area.");
        }
    });
    //validation for create ValidationRankRecord
    function ValidationAddressRecord() {
        if (city == '' || city == null || city == undefined) {
            return false;
        }
        else if (township == '' || township == null || township == undefined) {
            return false;
        }
        else if (place == '' || place == null || place == undefined) {
            return false;
        }
        else if (zipcode == '' || zipcode == null || zipcode == undefined) {
            return false;
        }
        else {
            return true;
        }
    }
    //end validation ValidationRankRecord
    //BindEntity
    function BindAddressEntity() {
        city = $('#txtCity').val();
        township = $('#txtTownship').val();
        place = $('#txtPlace').val();
        zipcode = $('#txtZipCode').val();
        area = $('#txtArea').val();
       
    }
    //Ajax Post Functin For RankRecord Create
    function CreateAddressRecord() {
        $.ajax({
            type: 'POST',
            dataType: 'JSON',
            url: "@Url.Action("CreateAddress","Employee",FormMethod.Post)",
            data: { 'City':city,'Township':township,'Place':place,'ZipCode':zipcode,'Area':area },
        success: function (data) {
            if (data) {
                alert("New Address record create successfully!")
                window.location.reload();
            }
            else if (data == false) {
                $('#errorCity').text("City is already existed!");
            }
            else {
                $('#errorCity').text("An error occurred while processing your request.");
            }
        }
    });
    }
</script>