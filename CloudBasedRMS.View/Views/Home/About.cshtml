@{
    ViewBag.Title = "About";
    Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<html>
<head ng-app="akog02App">
    <script src="~/Scripts/angular.js"></script>
    <script src="~/Scripts/Angular/MyScript.js"></script>    
</head>
<body>
    <h2>@ViewBag.Title.</h2>
    <div class="col col-md-10">     
        <div class="row">
                <div class="bootstrap-admin-content-title">
                        <b>1) Ease of Use</b>
                        A CBRMSsystem that is optimized for taking orders and payments should be almost mindlessly simple to operate. The user interface should be both simple and intuitive. With modern technology, there’s no need to put up with clunky interfaces anymore. Maybe different tabs and menu groups are color coded or strategically placed so they’re easy to locate. Your staff should never have to dig through the interface in order to find the menu or payment option that they are looking for. When guests are ready to pay, servers should be able to complete the transaction in seconds with just a few simple clicks. By prioritizing ease of use, staff can be engaged with guests as they take orders and accept payments rather than struggling with “the freaking CBRMSsystem.”
                    </p>
                </div>
            </div>
            <p>
                <b>
                    2) Speed & Volume
                </b>
                Whether you’ve got a line out the door for brunch reservations or you’re running a busy nightclub on New Year's Eve, things need to move fast! As your business grows, your CBRMSsoftware should be able to keep up.  How does your potential system handle volume? Do your best to ensure that the system will be able to scale with your business and help you get through the line faster so you can serve more guests. Ask the CBRMSprovider about their other customers that handle the volume you expect. Use referrals as a way to validate the scalability of a system.
            </p>
            <p>
                <b>
                    3) Flexibility
                </b>
                The restaurant environment is extremely fast-paced and often unpredictable. A CBRMSsystem should be able to adjust and accommodate changes on the fly. If a guests wants the house salad, but does not want tomatoes and would prefer Italian dressing rather than the house vinaigrette, servers should be able to make all of the desired modifications quickly and easily on the CBRMSinterface. Servers should be able to easily split checks. Advanced systems will allow staff to split checks by seat number and by individual menu item. If your servers are happy with the flexibility and customizability of the system, you’ll have faster, more accurate service and a happier staff.
            </p>
            <p>
                <b>
                    4) Workflow Integration
                </b>
                No two restaurants are the same. Your CBRMSsystem should seamlessly integrate with your restaurant’s specific operations. Think about how the CBRMSsystem will connect different roles and processes to help decrease errors and waste. Think about how your CBRMSprocesses orders in relation to the setup of the kitchen. Maybe you need to be able to split kitchen orders between different prep stations. Salad, for example, should go to the cold station and the sliders should go to the grill and both should come out at the same time. Maybe a manager is required to approve voids, comps and discounts before they are accepted. The CBRMSsystem should require those actions before approving those transactions. There’s no reason your CBRMSsoftware can’t be totally customized to your business.
            </p>
    </div>
</body>
</html>

